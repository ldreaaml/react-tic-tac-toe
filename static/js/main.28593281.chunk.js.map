{"version":3,"sources":["components/Customizable.ts","components/Square.tsx","components/Board.tsx","components/GameStatus.tsx","components/ResetButton.tsx","components/StateChecker.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Player","MyTheme","useStyles","makeStyles","theme","createStyles","square","height","width","backgroundColor","default","borderRadius","fontSize","textAlignVertical","textAlign","color","firstPlayer","one","secondPlayer","two","Square","value","index","setValue","classes","Grid","item","id","className","onClick","event","root","justifyContent","spacing","title","board","display","gridTemplateColumns","gridGap","padding","border","Board","gameState","Typography","container","map","status","statusColor","marginTop","GameStatus","gameStatus","currentPlayer","toUpperCase","colors","btn","margin","ResetButton","handleReset","Button","variant","_event","test","findWinner","winstate","i","length","a","b","c","checkForTie","indexOf","App","useState","Array","fill","setGameState","setPlayerState","setGameStatus","updateGameStatus","StateChecker","swapPlayer","newGameState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sKAAYA,EAKAC,E,2GALAD,K,QAAAA,E,SAAAA,M,cAKAC,K,cAAAA,E,cAAAA,E,mBAAAA,M,gBCKNC,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,OAAQ,CACNC,OAAQ,IACRC,MAAO,IACPC,gBAAgB,GAAD,OAAKR,EAAQS,SAC5BC,aAAc,GACdC,SAAU,GACVC,kBAAmB,SACnBC,UAAW,SACXC,MAAO,SAETC,YAAa,CACXP,gBAAgB,GAAD,OAAKR,EAAQgB,MAE9BC,aAAc,CACZT,gBAAgB,GAAD,OAAKR,EAAQkB,WAKrBC,EAAS,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,SAC/BC,EAAUtB,IAKhB,OACE,cAACuB,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,qBACEC,GAAE,UAAKL,GACPM,UAAS,oBACPJ,EAAQlB,OADD,sBAGPe,IAAUrB,EAAOiB,IACbO,EAAQR,YACRK,IAAUrB,EAAOmB,IACjBK,EAAQN,aACR,IAENW,QAjBgB,SAACC,GACrBP,EAASD,IAKP,SAaGD,OCpCHnB,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACX0B,KAAM,CACJC,eAAgB,SAChBC,QAAS,GAEXC,MAAO,CACLpB,UAAW,SACXF,SAAU,GACVG,MAAM,GAAD,OAAKd,EAAQS,UAEpByB,MAAO,CACLC,QAAS,OACTC,oBAAqB,iBACrBC,QAAS,GACTC,QAASnC,EAAM6B,QAAQ,GACvBO,OAAO,aAAD,OAAevC,EAAQS,eAKtB+B,EAAQ,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,UAAWnB,EAAsB,EAAtBA,SAC3BC,EAAUtB,IAChB,OACE,qCACE,cAACyC,EAAA,EAAD,CAAYf,UAAWJ,EAAQU,MAA/B,yBACA,cAACT,EAAA,EAAD,CAAMmB,WAAS,EAAChB,UAAWJ,EAAQO,KAAnC,SACE,cAACN,EAAA,EAAD,CAAMC,MAAI,EAAV,SACE,cAACD,EAAA,EAAD,CAAMmB,WAAS,EAAChB,UAAWJ,EAAQW,MAAnC,SACGO,EAAUG,KAAI,SAACxB,EAAOC,GAAR,OACb,cAAC,EAAD,CAAQD,MAAOA,EAAOC,MAAOA,EAAOC,SAAUA,iB,iBCrCtDrB,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvC0C,OAAQ,kBAA+C,CACrD/B,MADM,EAAGgC,YAETnC,SAAU,GACVoC,UAAW,SAIFC,EAAa,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,WAAYC,EAA2B,EAA3BA,cACjCJ,EACW,QAAfG,EAAA,UACOjD,EAAQS,SACXyC,IAAkBnD,EAAOiB,IAAzB,UACGhB,EAAQgB,KADX,UAEGhB,EAAQkB,KAEXK,EAAUtB,EAAU,CAAE6C,gBAE5B,OACE,mCACI,WACA,OAAQG,GACN,IAAK,MACH,OACE,qCACE,eAACP,EAAA,EAAD,CAAYf,UAAWJ,EAAQsB,OAA/B,uBACaK,EAAcC,cAD3B,OAGA,cAAC,IAAD,CAAUC,OAAQ,CAACN,EAAa,gBAGtC,IAAK,MACH,OACE,cAACJ,EAAA,EAAD,CAAYf,UAAWJ,EAAQsB,OAA/B,yBAEJ,QACE,OACE,eAACH,EAAA,EAAD,CAAYf,UAAWJ,EAAQsB,OAA/B,UACGK,EAAcC,cADjB,YAjBN,M,QCrBFlD,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXiD,IAAK,CACH7C,gBAAgB,GAAD,OAAKR,EAAQS,SAC5BK,MAAO,OACPH,SAAU,GACVC,kBAAmB,SACnB0B,QAAS,GACTgB,OAAQ,SAKDC,EAAc,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,YACtBjC,EAAUtB,IAMhB,OACE,cAACwD,EAAA,EAAD,CACE,aAAW,cACXC,QAAQ,YACR/B,UAAWJ,EAAQ8B,IACnBzB,QATkB,SAAC+B,GACrBH,KAIA,yBCEJ,IACeI,EADF,CAACC,WA/Bd,SAAqBpB,GAWjB,IAVA,IAAMqB,EAAW,CACf,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAC,EAAI,EAAGA,EAAID,EAASE,OAAQD,IAAK,CACxC,kBAAkBD,EAASC,GAA3B,GAAOE,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GACE1B,EAAUwB,IACVxB,EAAUwB,KAAOxB,EAAUyB,IAC3BzB,EAAUwB,KAAOxB,EAAU0B,GAE3B,OAAO,EAGX,OAAO,GAUcC,YAPzB,SAAqB3B,GACjB,OAA+B,IAA3BA,EAAU4B,QAAQ,MCyBXC,MA1Cf,WACE,MAAkCC,mBAAmBC,MAAM,GAAGC,KAAK,KAAnE,mBAAOhC,EAAP,KAAkBiC,EAAlB,KACA,EAAwCH,mBAAiBxE,EAAOiB,KAAhE,mBAAOkC,EAAP,KAAsByB,EAAtB,KACA,EAAoCJ,mBAAiB,WAArD,mBAAOtB,EAAP,KAAmB2B,EAAnB,KAWMC,EAAmB,SAACpC,GACpBqC,EAAajB,WAAWpB,GAC1BmC,EAAc,OACLE,EAAaV,YAAY3B,GAClCmC,EAAc,OAEdG,KAIEA,EAAa,WACjBJ,EAAezB,IAAkBnD,EAAOiB,IAAMjB,EAAOmB,IAAMnB,EAAOiB,MAQpE,OACE,qCACE,cAAC,EAAD,CAAOyB,UAAWA,EAAWnB,SA9BhB,SAACD,GAChB,GAAyB,KAArBoB,EAAUpB,IAAgC,YAAf4B,EAA0B,CACvD,IAAM+B,EAAY,YAAOvC,GACzBuC,EAAa3D,GAAS6B,EACtBwB,EAAaM,GACbH,EAAiBG,OA0BjB,cAAC,EAAD,CAAY/B,WAAYA,EAAYC,cAAeA,IACnD,cAAC,EAAD,CAAaM,YATC,WAChBkB,EAAaF,MAAM,GAAGC,KAAK,KAC3BG,EAAc,kBCxBHK,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.28593281.chunk.js","sourcesContent":["export enum Player {\r\n    one = \"x\",\r\n    two = \"o\"\r\n};\r\n\r\nexport enum MyTheme {\r\n    one = \"#f58349\",\r\n    two = \"#8ac787\",\r\n    default = \"#8fa6b0\"\r\n};","import { makeStyles, Theme, createStyles, Grid } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { Player, MyTheme } from \"./Customizable\";\r\n\r\ninterface Props {\r\n  value: string; //current state of the square\r\n  index: number;\r\n  setValue(index: number): void;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    square: {\r\n      height: 100,\r\n      width: 100,\r\n      backgroundColor: `${MyTheme.default}`,\r\n      borderRadius: 10,\r\n      fontSize: 65,\r\n      textAlignVertical: \"center\",\r\n      textAlign: \"center\",\r\n      color: \"white\",\r\n    },\r\n    firstPlayer: {\r\n      backgroundColor: `${MyTheme.one}`,\r\n    },\r\n    secondPlayer: {\r\n      backgroundColor: `${MyTheme.two}`,\r\n    },\r\n  })\r\n);\r\n\r\nexport const Square = ({ value, index, setValue }: Props) => {\r\n  const classes = useStyles();\r\n  const handleOnClick = (event: any) => {\r\n    setValue(index);\r\n  };\r\n\r\n  return (\r\n    <Grid item>\r\n      <div\r\n        id={`${index}`}\r\n        className={`\r\n        ${classes.square} \r\n        ${\r\n          value === Player.one\r\n            ? classes.firstPlayer\r\n            : value === Player.two\r\n            ? classes.secondPlayer\r\n            : \"\"\r\n        }`}\r\n        onClick={handleOnClick}\r\n      >\r\n        {value}\r\n      </div>\r\n    </Grid>\r\n  );\r\n};\r\n","import {\r\n  makeStyles,\r\n  Grid,\r\n  createStyles,\r\n  Theme,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { Square } from \"./Square\";\r\nimport { MyTheme } from \"./Customizable\";\r\n\r\ninterface Props {\r\n  gameState: string[];\r\n  setValue(index: number): void;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      justifyContent: \"center\",\r\n      spacing: 2,\r\n    },\r\n    title: {\r\n      textAlign: \"center\",\r\n      fontSize: 45,\r\n      color: `${MyTheme.default}`,\r\n    },\r\n    board: {\r\n      display: \"grid\",\r\n      gridTemplateColumns: \"repeat(3, 1fr)\",\r\n      gridGap: 10,\r\n      padding: theme.spacing(2),\r\n      border: `5px solid ${MyTheme.default}`,\r\n    },\r\n  })\r\n);\r\n\r\nexport const Board = ({ gameState, setValue }: Props) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      <Typography className={classes.title}>Tic Tac Toe</Typography>\r\n      <Grid container className={classes.root}>\r\n        <Grid item>\r\n          <Grid container className={classes.board}>\r\n            {gameState.map((value, index) => (\r\n              <Square value={value} index={index} setValue={setValue} />\r\n            ))}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n","import { makeStyles, Typography } from \"@material-ui/core\";\r\nimport Confetti from \"react-confetti\";\r\nimport { MyTheme, Player } from \"./Customizable\";\r\n\r\ninterface Props {\r\n  gameStatus: string;\r\n  currentPlayer: string;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  status: ({ statusColor }: { statusColor: string }) => ({\r\n    color: statusColor,\r\n    fontSize: 40,\r\n    marginTop: 10,\r\n  }),\r\n}));\r\n\r\nexport const GameStatus = ({ gameStatus, currentPlayer }: Props) => {\r\n  const statusColor =\r\n    gameStatus === \"tie\"\r\n      ? `${MyTheme.default}`\r\n      : currentPlayer === Player.one\r\n      ? `${MyTheme.one}`\r\n      : `${MyTheme.two}`;\r\n\r\n  const classes = useStyles({ statusColor });\r\n\r\n  return (\r\n    <>\r\n      {(() => {\r\n        switch (gameStatus) {\r\n          case \"win\":\r\n            return (\r\n              <>\r\n                <Typography className={classes.status}>\r\n                  Winner is {currentPlayer.toUpperCase()}!\r\n                </Typography>\r\n                <Confetti colors={[statusColor, \"#c3d9e3\"]} />\r\n              </>\r\n            );\r\n          case \"tie\":\r\n            return (\r\n              <Typography className={classes.status}>It's a tie!</Typography>\r\n            );\r\n          default:\r\n            return (\r\n              <Typography className={classes.status}>\r\n                {currentPlayer.toUpperCase()} Turn\r\n              </Typography>\r\n            );\r\n        }\r\n      })()}\r\n    </>\r\n  );\r\n};\r\n","import { Button, createStyles, makeStyles, Theme } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { MyTheme } from \"./Customizable\";\r\n\r\ninterface Props {\r\n  handleReset(): void;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    btn: {\r\n      backgroundColor: `${MyTheme.default}`,\r\n      color: \"#fff\",\r\n      fontSize: 20,\r\n      textAlignVertical: \"center\",\r\n      padding: 15,\r\n      margin: 20,\r\n    },\r\n  })\r\n);\r\n\r\nexport const ResetButton = ({ handleReset }: Props) => {\r\n  const classes = useStyles();\r\n\r\n  const handleOnClick = (_event: any) => {\r\n    handleReset();\r\n  };\r\n\r\n  return (\r\n    <Button\r\n      aria-label=\"resetButton\"\r\n      variant=\"contained\"\r\n      className={classes.btn}\r\n      onClick={handleOnClick}\r\n    >\r\n      Reset Game\r\n    </Button>\r\n  );\r\n};\r\n","function findWinner (gameState:string[]){\r\n    const winstate = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < winstate.length; i++) {\r\n      const [a, b, c] = winstate[i];\r\n      if (\r\n        gameState[a] &&\r\n        gameState[a] === gameState[b] &&\r\n        gameState[a] === gameState[c]\r\n      ) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction checkForTie(gameState:string[]){\r\n    if (gameState.indexOf(\"\") === -1) {\r\n      return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nconst test = {findWinner,checkForTie};\r\nexport default test","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { Board } from \"./components/Board\";\r\nimport { GameStatus } from \"./components/GameStatus\";\r\nimport { ResetButton } from \"./components/ResetButton\";\r\nimport StateChecker from \"./components/StateChecker\";\r\nimport { Player } from \"./components/Customizable\";\r\n\r\nfunction App() {\r\n  const [gameState, setGameState] = useState<string[]>(Array(9).fill(\"\"));\r\n  const [currentPlayer, setPlayerState] = useState<string>(Player.one);\r\n  const [gameStatus, setGameStatus] = useState<string>(\"playing\");\r\n\r\n  const setValue = (index: number) => {\r\n    if (gameState[index] === \"\" && gameStatus === \"playing\") {\r\n      const newGameState = [...gameState];\r\n      newGameState[index] = currentPlayer;\r\n      setGameState(newGameState);\r\n      updateGameStatus(newGameState);\r\n    }\r\n  };\r\n\r\n  const updateGameStatus = (gameState: string[]) => {\r\n    if (StateChecker.findWinner(gameState)) {\r\n      setGameStatus(\"win\");\r\n    } else if (StateChecker.checkForTie(gameState)) {\r\n      setGameStatus(\"tie\");\r\n    } else {\r\n      swapPlayer();\r\n    }\r\n  };\r\n\r\n  const swapPlayer = () => {\r\n    setPlayerState(currentPlayer === Player.one ? Player.two : Player.one);\r\n  };\r\n\r\n  const resetGame = () => {\r\n    setGameState(Array(9).fill(\"\"));\r\n    setGameStatus(\"playing\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Board gameState={gameState} setValue={setValue} />\r\n      <GameStatus gameStatus={gameStatus} currentPlayer={currentPlayer} />\r\n      <ResetButton handleReset={resetGame} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}